name: Trending Service CD

on:
  push:
    branches: [ main, dev ]

  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'services/trending-service/requirements.txt'
      
      - name: Install dependencies
        working-directory: ./services/trending-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Test uvicorn server launch
        working-directory: ./services/trending-service
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8001 &
          sleep 5
          curl -s http://localhost:8001/health || curl -s http://localhost:8001/ || true
          pkill -f uvicorn || true

  build-and-push:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_output_vars.outputs.tag }}
      env: ${{ steps.set_output_vars.outputs.env }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Determine image tag
        id: determine_tag
        run: |
          # Get short commit SHA
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Extract branch name from GITHUB_REF
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Determine the tag based on branch
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "env=main" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "tag=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "env=dev" >> $GITHUB_OUTPUT
          else
            # For any other branch, use branch name + commit SHA
            SAFE_BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/\//-/g')
            echo "tag=${SAFE_BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "env=${SAFE_BRANCH_NAME}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./services/trending-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/newsify-trending-service:${{ steps.determine_tag.outputs.tag }}
          build-args: |
            SERPAPI_API_KEY=${{ secrets.SERPAPI_API_KEY }}
            DATA_PATH=/app/data
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PORT=${{ secrets.DB_PORT }}
            DATABASE=${{ secrets.DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_DIALECT=${{ secrets.DB_DIALECT }}
            DO_DB_NAME=${{ secrets.DO_DB_NAME }}
            DO_DB_PORT=${{ secrets.DO_DB_PORT }}
            DO_DB_HOST=${{ secrets.DO_DB_HOST }}
            DO_DB_USERNAME=${{ secrets.DO_DB_USERNAME }}
            DO_DB_PASSWORD=${{ secrets.DO_DB_PASSWORD }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_USER=${{ secrets.REDIS_USER }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REDIS_CHANNEL=${{ secrets.REDIS_CHANNEL }}
            ELS_IP=${{ secrets.ELS_IP }}
            ELS_USERNAME=${{ secrets.ELS_USERNAME }}
            ELS_PASSWORD=${{ secrets.ELS_PASSWORD }}
            
      - name: Set output variables
        id: set_output_vars
        run: |
          echo "tag=${{ steps.determine_tag.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "env=${{ steps.determine_tag.outputs.env }}" >> $GITHUB_OUTPUT

  update-infrastructure:
    needs: build-and-push
    uses: ./.github/workflows/infrastructure-update.yml
    with:
      service: trending-service
      tag: ${{ needs.build-and-push.outputs.tag }}
      env: ${{ needs.build-and-push.outputs.env }}
      source_branch: ${{ github.ref_name }}
    secrets:
      ARGOCD_GITHUB_TOKEN: ${{ secrets.ARGOCD_GITHUB_TOKEN }}